{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "balance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xf0b1287a9d1d33d7c38d04467c0620833e35a43791f9ff539882a02aa2f1436a",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1049391",
        "logsBloom": "0x
        "blockHash": "0x05ebe9a6d20a161bdbaa30649f4764fc5c5e7c5755d782790bcb7c09de1c7d67",
        "transactionHash": "0xf0b1287a9d1d33d7c38d04467c0620833e35a43791f9ff539882a02aa2f1436a",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1049391",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "ab11fcd91d7ee36d04d2f25a1f0cb89d",
    "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"OmBayus\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"balance()\":{\"details\":\"This implements price feeds as our library\",\"returns\":{\"_0\":\"uint256\"}},\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balance()\":{\"notice\":\"This function funds this contract\"},\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This is contract is to demo sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *  @author OmBayus\\n *  @notice This is contract is to demo sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 private constant MIN_USD = 5 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender == owner,FundMe__NotOwner());\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _priceFeed) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\\n            \\\"Didn't send enough\\\"\\n        ); // 1e18 = 1* 10 **18\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     *  @return uint256\\n     */\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess,\\\"Send Failed\\\");\\n\\n        // call\\n        (\\n            bool callSuccess, // bytes memory dataReturned\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (\\n            bool callSuccess, // bytes memory dataReturned\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe5b0b6948cb3d047a575b362b952256284fbab40b5d094d851cb760f0456fa3a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            ,\\n            /*uint80 roundID*/\\n            int256 price,\\n            ,\\n            ,\\n\\n        ) = /*uint startedAt*/\\n            /*uint timeStamp*/\\n            /*uint80 answeredInRound*/\\n            priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xba8b5f8538afb5d655ce6270adad07b8b2eec706a9048b9539f38014afad4b42\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001318380380620013188339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000147565b600081519050620000c7816200012d565b92915050565b600060208284031215620000e057600080fd5b6000620000f084828501620000b6565b91505092915050565b600062000106826200010d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200013881620000f9565b81146200014457600080fd5b50565b60805160601c6111a46200017460003960008181610350015281816105de015261063601526111a46000f3fe60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063b69ef8a81461014c578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d5578063893d20e8146100ec5780639e87a5cd146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610b7d565b610305565b6040516100cc9190610d67565b60405180910390f35b3480156100e157600080fd5b506100ea61034e565b005b3480156100f857600080fd5b506101016105da565b60405161010e9190610cf1565b60405180910390f35b34801561012357600080fd5b5061012c610602565b6040516101399190610d0c565b60405180910390f35b61014a6101cb565b005b34801561015857600080fd5b5061016161062c565b60405161016e9190610d67565b60405180910390f35b34801561018357600080fd5b5061018c610634565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610ba6565b610924565b6040516101c29190610cf1565b60405180910390f35b674563918244f40000610209600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099190919063ffffffff16565b101561024a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024190610d27565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fc9190610d9e565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104a457600080828154811061041e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049c90611016565b9150506103d6565b50600067ffffffffffffffff8111156104e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105145781602001602082028036833780820191505090505b506000908051906020019061052a929190610a6d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055190610cdc565b60006040518083038185875af1925050503d806000811461058e576040519150601f19603f3d011682016040523d82523d6000602084013e610593565b606091505b50509050806105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90610d47565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f2575b5050505050905060005b81518110156107ed57600082828151811061078a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e590611016565b915050610746565b50600067ffffffffffffffff81111561082f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561085d5781602001602082028036833780820191505090505b5060009080519060200190610873929190610a6d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161089a90610cdc565b60006040518083038185875af1925050503d80600081146108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b5050905080610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790610d47565b60405180910390fd5b5050565b600080828154811061095f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061099d836109cd565b90506000670de0b6b3a764000085836109b69190610f3c565b6109c09190610df4565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610bcf565b5050509150506402540be40081610a659190610e25565b915050919050565b828054828255906000526020600020908101928215610ae6579160200282015b82811115610ae55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a8d565b5b509050610af39190610af7565b5090565b5b80821115610b10576000816000905550600101610af8565b5090565b600081359050610b2381611112565b92915050565b600081519050610b3881611129565b92915050565b600081359050610b4d81611140565b92915050565b600081519050610b6281611140565b92915050565b600081519050610b7781611157565b92915050565b600060208284031215610b8f57600080fd5b6000610b9d84828501610b14565b91505092915050565b600060208284031215610bb857600080fd5b6000610bc684828501610b3e565b91505092915050565b600080600080600060a08688031215610be757600080fd5b6000610bf588828901610b68565b9550506020610c0688828901610b29565b9450506040610c1788828901610b53565b9350506060610c2888828901610b53565b9250506080610c3988828901610b68565b9150509295509295909350565b610c4f81610f96565b82525050565b610c5e81610ff2565b82525050565b6000610c71601283610d8d565b9150610c7c826110bd565b602082019050919050565b6000610c94600083610d82565b9150610c9f826110e6565b600082019050919050565b6000610cb7600b83610d8d565b9150610cc2826110e9565b602082019050919050565b610cd681610fd2565b82525050565b6000610ce782610c87565b9150819050919050565b6000602082019050610d066000830184610c46565b92915050565b6000602082019050610d216000830184610c55565b92915050565b60006020820190508181036000830152610d4081610c64565b9050919050565b60006020820190508181036000830152610d6081610caa565b9050919050565b6000602082019050610d7c6000830184610ccd565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610da982610fd2565b9150610db483610fd2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de957610de861105f565b5b828201905092915050565b6000610dff82610fd2565b9150610e0a83610fd2565b925082610e1a57610e1961108e565b5b828204905092915050565b6000610e3082610fa8565b9150610e3b83610fa8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e7a57610e7961105f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eb757610eb661105f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ef457610ef361105f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f3157610f3061105f565b5b828202905092915050565b6000610f4782610fd2565b9150610f5283610fd2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f8b57610f8a61105f565b5b828202905092915050565b6000610fa182610fb2565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610ffd82611004565b9050919050565b600061100f82610fb2565b9050919050565b600061102182610fd2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110545761105361105f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b50565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b61111b81610f96565b811461112657600080fd5b50565b61113281610fa8565b811461113d57600080fd5b50565b61114981610fd2565b811461115457600080fd5b50565b61116081610fdc565b811461116b57600080fd5b5056fea2646970667358221220b19ffd1fa1fbf4799216e21f87cda76d9fcc0cf97ceb7f9dc3c3d0cec37d521564736f6c63430008040033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063b69ef8a81461014c578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d5578063893d20e8146100ec5780639e87a5cd146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610b7d565b610305565b6040516100cc9190610d67565b60405180910390f35b3480156100e157600080fd5b506100ea61034e565b005b3480156100f857600080fd5b506101016105da565b60405161010e9190610cf1565b60405180910390f35b34801561012357600080fd5b5061012c610602565b6040516101399190610d0c565b60405180910390f35b61014a6101cb565b005b34801561015857600080fd5b5061016161062c565b60405161016e9190610d67565b60405180910390f35b34801561018357600080fd5b5061018c610634565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610ba6565b610924565b6040516101c29190610cf1565b60405180910390f35b674563918244f40000610209600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099190919063ffffffff16565b101561024a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024190610d27565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fc9190610d9e565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104a457600080828154811061041e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049c90611016565b9150506103d6565b50600067ffffffffffffffff8111156104e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105145781602001602082028036833780820191505090505b506000908051906020019061052a929190610a6d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055190610cdc565b60006040518083038185875af1925050503d806000811461058e576040519150601f19603f3d011682016040523d82523d6000602084013e610593565b606091505b50509050806105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90610d47565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f2575b5050505050905060005b81518110156107ed57600082828151811061078a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e590611016565b915050610746565b50600067ffffffffffffffff81111561082f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561085d5781602001602082028036833780820191505090505b5060009080519060200190610873929190610a6d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161089a90610cdc565b60006040518083038185875af1925050503d80600081146108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b5050905080610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790610d47565b60405180910390fd5b5050565b600080828154811061095f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061099d836109cd565b90506000670de0b6b3a764000085836109b69190610f3c565b6109c09190610df4565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610bcf565b5050509150506402540be40081610a659190610e25565b915050919050565b828054828255906000526020600020908101928215610ae6579160200282015b82811115610ae55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a8d565b5b509050610af39190610af7565b5090565b5b80821115610b10576000816000905550600101610af8565b5090565b600081359050610b2381611112565b92915050565b600081519050610b3881611129565b92915050565b600081359050610b4d81611140565b92915050565b600081519050610b6281611140565b92915050565b600081519050610b7781611157565b92915050565b600060208284031215610b8f57600080fd5b6000610b9d84828501610b14565b91505092915050565b600060208284031215610bb857600080fd5b6000610bc684828501610b3e565b91505092915050565b600080600080600060a08688031215610be757600080fd5b6000610bf588828901610b68565b9550506020610c0688828901610b29565b9450506040610c1788828901610b53565b9350506060610c2888828901610b53565b9250506080610c3988828901610b68565b9150509295509295909350565b610c4f81610f96565b82525050565b610c5e81610ff2565b82525050565b6000610c71601283610d8d565b9150610c7c826110bd565b602082019050919050565b6000610c94600083610d82565b9150610c9f826110e6565b600082019050919050565b6000610cb7600b83610d8d565b9150610cc2826110e9565b602082019050919050565b610cd681610fd2565b82525050565b6000610ce782610c87565b9150819050919050565b6000602082019050610d066000830184610c46565b92915050565b6000602082019050610d216000830184610c55565b92915050565b60006020820190508181036000830152610d4081610c64565b9050919050565b60006020820190508181036000830152610d6081610caa565b9050919050565b6000602082019050610d7c6000830184610ccd565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610da982610fd2565b9150610db483610fd2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de957610de861105f565b5b828201905092915050565b6000610dff82610fd2565b9150610e0a83610fd2565b925082610e1a57610e1961108e565b5b828204905092915050565b6000610e3082610fa8565b9150610e3b83610fa8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e7a57610e7961105f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eb757610eb661105f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ef457610ef361105f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f3157610f3061105f565b5b828202905092915050565b6000610f4782610fd2565b9150610f5283610fd2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f8b57610f8a61105f565b5b828202905092915050565b6000610fa182610fb2565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610ffd82611004565b9050919050565b600061100f82610fb2565b9050919050565b600061102182610fd2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110545761105361105f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b50565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b61111b81610f96565b811461112657600080fd5b50565b61113281610fa8565b811461113d57600080fd5b50565b61114981610fd2565b811461115457600080fd5b50565b61116081610fdc565b811461116b57600080fd5b5056fea2646970667358221220b19ffd1fa1fbf4799216e21f87cda76d9fcc0cf97ceb7f9dc3c3d0cec37d521564736f6c63430008040033",
    "devdoc": {
        "author": "OmBayus",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "balance()": {
                "details": "This implements price feeds as our library",
                "returns": {
                    "_0": "uint256"
                }
            },
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "balance()": {
                "notice": "This function funds this contract"
            },
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This is contract is to demo sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 63,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 72,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
